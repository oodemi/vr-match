
steps:

# Build
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/vr-match:$REVISION_ID', '-f', './front-end/Dockerfile', './front-end' ]
  id: 'build-front-end'
  waitFor: ['-']
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/vr-match-api:$REVISION_ID', '-f', './api/Dockerfile', './api' ]
  id: 'build-api'
  waitFor: ['-']

# Push
- name: 'gcr.io/cloud-builders/docker'
  args: ["push", "gcr.io/$PROJECT_ID/vr-match:$REVISION_ID"]
  id: 'push-front-end'
  waitFor: ['build-front-end']
- name: 'gcr.io/cloud-builders/docker'
  args: ["push", "gcr.io/$PROJECT_ID/vr-match-api:$REVISION_ID"]
  id: 'push-api'
  waitFor: ['build-api']

# Apply environment variable
- name: 'loicmahieu/alpine-envsubst'
  entrypoint: 'sh'
  env:
  - "REVISION_ID=$REVISION_ID"
  - "PROJECT_ID=$PROJECT_ID"
  id: 'apply-env'
  waitFor: ['push-front-end', 'push-api']
  args:
  - '-c'
  - |
    envsubst < front-end/k8s/deployment.yml > front-end-deployment.yml
    envsubst < front-end/k8s/service.yml > front-end-service.yml
    envsubst < api/k8s/deployment.yml > api-deployment.yml
    envsubst < api/k8s/service.yml > api-service.yml

# Deploy
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  waitFor: ['apply-env']
  args:
  - '-c'
  - |
    gcloud config set container/use_client_certificate True
    gcloud container clusters get-credentials alice --zone asia-northeast1-a
    kubectl apply -f front-end-deployment.yml
    kubectl apply -f front-end-service.yml
    kubectl apply -f api-deployment.yml
    kubectl apply -f api-service.yml
